#define ZMK_POINTING_DEFAULT_MOVE_VAL 1100  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3
#define MOU  4
#define FUN  5

#define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro
#define MEH LS(LC(LALT))

/ {
    behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
        sabk: shift_to_alt_backspace {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp LA(BSPC)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        smart_shift: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&caps_word>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        sym_bspc: left_thumb_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&sabk>;
        };
        lhm: left_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33>;
        };
        rhm: right_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&sk LSHFT>;
            layers = <0>;
        };
        combo_lshift {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&sk LSHFT>;
            layers = <0>;
        };
        combo_rshift {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&sk LSHFT>;
            layers = <0>;
        };
        combo_mouse {
            timeout-ms = <50>;
            key-positions = <3 4>;
            bindings = <&tog MOU>;
            layers = <0>;
        };
        combo_function {
            timeout-ms = <50>;
            key-positions = <5 6>;
            bindings = <&tog FUN>;
            layers = <0>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
            &kp Q           &kp W          &kp E           &kp R           &kp T                                           &kp Y           &kp U         &kp I            &kp O           &kp P
            &kp A           &kp S          &kp D           &lhm LSHFT F    &kp G                                           &kp H           &rhm LSHFT J  &kp K            &kp L           &kp SQT
            &lhm LCTL Z     &lhm LALT X    &lhm LGUI C     &kp D           &kp V                                           &kp N           &kp M         &rhm LGUI COMMA  &rhm LALT DOT   &rhm LCTRL FSLH
                                                                            &lt NAV BSPC   &lt MOU TAB    &lt SYM ENTER  &lt NAV SPACE
            >;
        };

        nav {
            bindings = <
            &studio_unlock  &none       &none        &none          &none                                    &kp CAPS       &kp LC(PG_UP)   &kp UP          &kp LC(PG_DN)   &kp DELETE
            &none           &none       &none        &kp LSHFT      &none                                    &caps_word  &kp LEFT        &kp DOWN        &kp RIGHT       &kp BSLH
            &kp LCTRL       &kp LALT    &kp LGUI     &none          &none                                    &none          &kp HOME        &kp PAGE_DOWN         &kp PAGE_UP   &kp END
                                                                    &none         &none       &kp LC(BSPC)      &kp BSPC
            >;
        };

        sym {
            bindings = <
            AS(N1)          AS(N2)          AS(N3)          AS(N4)          AS(N5)                                          AS(N6)          AS(N7)          AS(N8)          AS(N9)          AS(N0)
            AS(GRAVE)       &sk LCTRL       &sk LALT        &sk LGUI        &sk LC(LALT)                                    AS(BSLH)        AS(MINUS)       AS(EQUAL)       AS(LBKT)        AS(RBKT)
            &none          &none          &none          &none          &none                                          &none          &none          &none          &none          &kp ENTER
                                                                            &none          &none          &kp LSHFT       &mo NAV
            >;
        };

        adj {
            bindings = <
            &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_CLR_ALL                                  &kp C_SLEEP     &none          &none          &kp C_BRI_DN    &kp C_BRI_UP
            &studio_unlock  &none          &none          &none          &none                                          &none          &none          &none          &kp C_VOL_DN    &kp C_VOL_UP
            &bootloader     &none          &none          &none          &none                                          &none          &none          &none          &none          &bootloader
                                                                            &none          &none          &none          &none
            >;
        };
        mou {
            bindings = <
            &bt BT_SEL 0    &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_CLR_ALL                                      &kp C_SLEEP     &none             &mmv MOVE_UP         &kp C_BRI_DN     &kp C_BRI_UP
            &kp C_PP        &kp C_VOL_DN   &kp C_MUTE     &kp C_VOL_UP   &kp C_NEXT                                           &none          &mmv MOVE_LEFT    &mmv MOVE_DOWN       &mmv MOVE_RIGHT  &kp C_VOL_UP
            &bootloader     &none          &none          &none          &none                                                &none          &msc SCRL_LEFT    &msc SCRL_DOWN       &msc SCRL_UP     &msc SCRL_RIGHT
                                                                         &none          &tog BASE          &mkp  LCLK         &mkp RCLK
            >;
        };
        fun {
            bindings = <
            &kp F12  &kp F7    &kp F8    &kp F9    &bt BT_CLR_ALL                                  &kp C_SLEEP     &none          &none          &kp C_BRI_DN    &kp C_BRI_UP
            &kp F11  &kp F4          &kp F5          &kp F6          &none                                          &none          &none          &none          &kp C_VOL_DN    &kp C_VOL_UP
            &kp F10     &kp F1          &kp F2          &kp F3          &none                                          &none          &none          &none          &none          &bootloader
                                                                            &tog BASE          &tog BASE          &none          &none
            >;
        };
    };
};

&lt {
    // require-prior-idle-ms = <100>;
    tapping-term-ms = <150>;
    quick-tap-ms = <200>;
};

&mt {
    quick-tap-ms = <200>;
};

&sk {
    release-after-ms = <500>;
    quick-release;
};